syntax = "proto3";

package authorization;

// ============================================================================
// Data Plane Service - High-performance authorization decisions
// ============================================================================

service AuthorizationData {
  // Evaluate a single authorization request
  rpc IsAuthorized(IsAuthorizedRequest) returns (IsAuthorizedResponse);
  
  // Evaluate multiple authorization requests in a single call (future)
  rpc BatchIsAuthorized(BatchIsAuthorizedRequest) returns (BatchIsAuthorizedResponse);
}

// Request for authorization decision
message IsAuthorizedRequest {
  // The policy store to evaluate against
  string policy_store_id = 1;
  
  // The principal making the request (e.g., "User::\"alice\"")
  EntityIdentifier principal = 2;
  
  // The action being performed (e.g., "Action::\"viewDocument\"")
  EntityIdentifier action = 3;
  
  // The resource being accessed (e.g., "Document::\"doc123\"")
  EntityIdentifier resource = 4;
  
  // Additional context for the request (e.g., IP address, time)
  optional string context = 5; // JSON string
  
  // Entity data slice for attribute-based evaluation
  repeated Entity entities = 6;
}

// Response with authorization decision
message IsAuthorizedResponse {
  // The decision result
  Decision decision = 1;
  
  // IDs of policies that determined this decision
  repeated string determining_policies = 2;
  
  // Any errors that occurred during evaluation
  repeated string errors = 3;
}

// Authorization decision
enum Decision {
  DECISION_UNSPECIFIED = 0;
  ALLOW = 1;
  DENY = 2;
}

// Batch authorization request
message BatchIsAuthorizedRequest {
  string policy_store_id = 1;
  repeated IsAuthorizedRequest requests = 2;
}

// Batch authorization response
message BatchIsAuthorizedResponse {
  repeated IsAuthorizedResponse responses = 1;
}

// ============================================================================
// Control Plane Service - Policy and schema management
// ============================================================================

service AuthorizationControl {
  // Create a new policy store
  rpc CreatePolicyStore(CreatePolicyStoreRequest) returns (CreatePolicyStoreResponse);
  
  // Get policy store details
  rpc GetPolicyStore(GetPolicyStoreRequest) returns (GetPolicyStoreResponse);
  
  // List all policy stores
  rpc ListPolicyStores(ListPolicyStoresRequest) returns (ListPolicyStoresResponse);
  
  // Delete a policy store
  rpc DeletePolicyStore(DeletePolicyStoreRequest) returns (DeletePolicyStoreResponse);
  
  // Put or update schema for a policy store
  rpc PutSchema(PutSchemaRequest) returns (PutSchemaResponse);
  
  // Get schema for a policy store
  rpc GetSchema(GetSchemaRequest) returns (GetSchemaResponse);
  
  // Create a new policy
  rpc CreatePolicy(CreatePolicyRequest) returns (CreatePolicyResponse);
  
  // Get a policy
  rpc GetPolicy(GetPolicyRequest) returns (GetPolicyResponse);
  
  // Update a policy
  rpc UpdatePolicy(UpdatePolicyRequest) returns (UpdatePolicyResponse);
  
  // Delete a policy
  rpc DeletePolicy(DeletePolicyRequest) returns (DeletePolicyResponse);
  
  // List policies in a policy store
  rpc ListPolicies(ListPoliciesRequest) returns (ListPoliciesResponse);
}

// ============================================================================
// Policy Store Management
// ============================================================================

message CreatePolicyStoreRequest {
  // Optional description
  optional string description = 1;
}

message CreatePolicyStoreResponse {
  string policy_store_id = 1;
  string created_at = 2;
}

message GetPolicyStoreRequest {
  string policy_store_id = 1;
}

message GetPolicyStoreResponse {
  string policy_store_id = 1;
  optional string description = 2;
  string created_at = 3;
  string updated_at = 4;
}

message ListPolicyStoresRequest {
  optional int32 max_results = 1;
  optional string next_token = 2;
}

message ListPolicyStoresResponse {
  repeated PolicyStoreItem policy_stores = 1;
  optional string next_token = 2;
}

message PolicyStoreItem {
  string policy_store_id = 1;
  optional string description = 2;
  string created_at = 3;
}

message DeletePolicyStoreRequest {
  string policy_store_id = 1;
}

message DeletePolicyStoreResponse {
  // Empty response
}

// ============================================================================
// Schema Management
// ============================================================================

message PutSchemaRequest {
  string policy_store_id = 1;
  string schema = 2; // Cedar schema in JSON format
}

message PutSchemaResponse {
  string policy_store_id = 1;
  repeated string namespaces = 2;
}

message GetSchemaRequest {
  string policy_store_id = 1;
}

message GetSchemaResponse {
  string policy_store_id = 1;
  string schema = 2; // Cedar schema in JSON format
  string created_at = 3;
  string updated_at = 4;
}

// ============================================================================
// Policy Management
// ============================================================================

message CreatePolicyRequest {
  string policy_store_id = 1;
  string policy_id = 2;
  PolicyDefinition definition = 3;
  optional string description = 4;
}

message CreatePolicyResponse {
  string policy_store_id = 1;
  string policy_id = 2;
  string created_at = 3;
}

message GetPolicyRequest {
  string policy_store_id = 1;
  string policy_id = 2;
}

message GetPolicyResponse {
  string policy_store_id = 1;
  string policy_id = 2;
  PolicyDefinition definition = 3;
  optional string description = 4;
  string created_at = 5;
  string updated_at = 6;
}

message UpdatePolicyRequest {
  string policy_store_id = 1;
  string policy_id = 2;
  PolicyDefinition definition = 3;
  optional string description = 4;
}

message UpdatePolicyResponse {
  string policy_store_id = 1;
  string policy_id = 2;
  string updated_at = 3;
}

message DeletePolicyRequest {
  string policy_store_id = 1;
  string policy_id = 2;
}

message DeletePolicyResponse {
  // Empty response
}

message ListPoliciesRequest {
  string policy_store_id = 1;
  optional int32 max_results = 2;
  optional string next_token = 3;
}

message ListPoliciesResponse {
  repeated PolicyItem policies = 1;
  optional string next_token = 2;
}

message PolicyItem {
  string policy_id = 1;
  optional string description = 2;
  string created_at = 3;
}

// ============================================================================
// Common Data Types
// ============================================================================

// Entity identifier (e.g., "User::\"alice\"")
message EntityIdentifier {
  string entity_type = 1; // e.g., "User"
  string entity_id = 2;   // e.g., "alice"
}

// Entity with attributes and parents
message Entity {
  EntityIdentifier identifier = 1;
  map<string, string> attributes = 2; // JSON-encoded attribute values
  repeated EntityIdentifier parents = 3; // Parent entities in hierarchy
}

// Policy definition
message PolicyDefinition {
  oneof policy_type {
    StaticPolicy static = 1;
    TemplateLinkedPolicy template_linked = 2;
  }
}

// Static Cedar policy
message StaticPolicy {
  string statement = 1; // Cedar policy text
}

// Template-linked policy (for future use)
message TemplateLinkedPolicy {
  string policy_template_id = 1;
  EntityIdentifier principal = 2;
  EntityIdentifier resource = 3;
}
